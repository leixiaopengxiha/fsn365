{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u5DE5\\u4F5C\\u5BA4\\\\fsn365\\\\pages\\\\assets\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Nav from '../nav';\nimport './assets.less';\nimport { getAssets } from '../../api';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nconst columns = [{\n  id: \"name\",\n  label: \"Asset\",\n  minWidth: 100,\n  color: \"#3499db\"\n}, {\n  id: \"id\",\n  label: \"Asset ID\",\n  minWidth: 100\n}, {\n  id: \"quantity\",\n  label: \"Quantity\",\n  minWidth: 170,\n  color: \"#3499db\"\n}];\n\nfunction TablePaginationActions(props) {\n  const theme = useTheme();\n  const {\n    count,\n    page,\n    rowsPerPage,\n    onChangePage\n  } = props;\n\n  const handleFirstPageButtonClick = event => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = event => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = event => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = event => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return __jsx(\"div\", {\n    className: \"btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(IconButton, {\n    onClick: handleFirstPageButtonClick,\n    disabled: page === 0,\n    \"aria-label\": \"first page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, theme.direction === 'rtl' ? __jsx(LastPageIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 46\n    }\n  }) : __jsx(FirstPageIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 65\n    }\n  })), __jsx(IconButton, {\n    onClick: handleBackButtonClick,\n    disabled: page === 0,\n    \"aria-label\": \"previous page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, theme.direction === 'rtl' ? __jsx(KeyboardArrowRight, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 46\n    }\n  }) : __jsx(KeyboardArrowLeft, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 71\n    }\n  })), __jsx(IconButton, {\n    onClick: handleNextButtonClick,\n    disabled: page >= Math.ceil(count / rowsPerPage) - 1,\n    \"aria-label\": \"next page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, theme.direction === 'rtl' ? __jsx(KeyboardArrowLeft, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 46\n    }\n  }) : __jsx(KeyboardArrowRight, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 70\n    }\n  })), __jsx(IconButton, {\n    onClick: handleLastPageButtonClick,\n    disabled: page >= Math.ceil(count / rowsPerPage) - 1,\n    \"aria-label\": \"last page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, theme.direction === 'rtl' ? __jsx(FirstPageIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 46\n    }\n  }) : __jsx(LastPageIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 66\n    }\n  })));\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired\n};\n\nfunction createData(asset, assetId, quantity) {\n  return {\n    asset,\n    assetId,\n    quantity\n  };\n} // const rows = [\n//     createData('Cupcake', 305, 3.7),\n//     createData('Donut', 452, 25.0),\n//     createData('Eclair', 262, 16.0),\n//     createData('Frozen yoghurt', 159, 6.0),\n//     createData('Gingerbread', 356, 16.0),\n//     createData('Honeycomb', 408, 3.2),\n//     createData('Ice cream sandwich', 237, 9.0),\n//     createData('Jelly Bean', 375, 0.0),\n//     createData('KitKat', 518, 26.0),\n//     createData('Lollipop', 392, 0.2),\n//     createData('Marshmallow', 318, 0),\n//     createData('Nougat', 360, 19.0),\n//     createData('Oreo', 437, 18.0),\n// ].sort((a, b) => (a.assetId < b.assetId ? -1 : 1));\n\n\nexport default function index() {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [rows, setRows] = React.useState([]);\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const {\n    0: data,\n    1: setData\n  } = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await getAssets();\n\n      if (result.data.data === undefined) {\n        fetchData();\n        return;\n      }\n\n      setRows(result.data.data);\n      console.log(result.data.data);\n    };\n\n    fetchData();\n  }, []);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"home-contiar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, __jsx(Nav, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    className: \"assets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }\n  }, __jsx(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  }, \"Assets\")), __jsx(TableContainer, {\n    component: Paper,\n    className: \"assets-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }, __jsx(Table, {\n    \"aria-label\": \"custom pagination table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 25\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 29\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 33\n    }\n  }, columns.map(column => __jsx(TableCell, {\n    key: column.id,\n    align: \"center\",\n    style: {\n      minWidth: column.minWidth\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 41\n    }\n  }, column.label)))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 29\n    }\n  }, rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, index) => {\n    return __jsx(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 45\n      }\n    }, columns.map(column => {\n      let value;\n      value = row[column.id];\n      return __jsx(TableCell, {\n        key: column.id,\n        align: \"center\",\n        style: {\n          color: column.color\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 57\n        }\n      }, column.id == \"quantity\" ? `${row[column.id] + row.symbol}  ` : value);\n    }));\n  })), __jsx(TableFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 29\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 33\n    }\n  }, __jsx(TablePagination, {\n    rowsPerPageOptions: [5, 10, 25, 50, 100],\n    colSpan: 3,\n    count: rows.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    SelectProps: {\n      inputProps: {\n        'aria-label': 'rows per page'\n      },\n      native: true\n    },\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    ActionsComponent: TablePaginationActions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 37\n    }\n  }))))))));\n}","map":{"version":3,"sources":["D:/工作室/fsn365/pages/assets/index.js"],"names":["React","useState","useEffect","Nav","getAssets","PropTypes","makeStyles","useTheme","Table","TableBody","TableHead","TableCell","TableContainer","TableFooter","TablePagination","TableRow","Paper","IconButton","FirstPageIcon","KeyboardArrowLeft","KeyboardArrowRight","LastPageIcon","columns","id","label","minWidth","color","TablePaginationActions","props","theme","count","page","rowsPerPage","onChangePage","handleFirstPageButtonClick","event","handleBackButtonClick","handleNextButtonClick","handleLastPageButtonClick","Math","max","ceil","direction","propTypes","number","isRequired","func","createData","asset","assetId","quantity","index","setPage","setRowsPerPage","rows","setRows","emptyRows","min","length","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","target","value","data","setData","fetchData","result","undefined","console","log","map","column","slice","row","symbol","inputProps","native"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Nav from '../nav'\r\nimport './assets.less'\r\nimport { getAssets } from '../../api'\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\nconst columns = [\r\n    { id: \"name\", label: \"Asset\", minWidth: 100, color: \"#3499db\" },\r\n    { id: \"id\", label: \"Asset ID\", minWidth: 100 },\r\n    { id: \"quantity\", label: \"Quantity\", minWidth: 170, color: \"#3499db\" },\r\n];\r\n\r\nfunction TablePaginationActions(props) {\r\n    const theme = useTheme();\r\n    const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        onChangePage(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        onChangePage(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        onChangePage(event, page + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n    };\r\n\r\n    return (\r\n        <div className='btn'>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n            </IconButton>\r\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n    count: PropTypes.number.isRequired,\r\n    onChangePage: PropTypes.func.isRequired,\r\n    page: PropTypes.number.isRequired,\r\n    rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction createData(asset, assetId, quantity) {\r\n    return { asset, assetId, quantity };\r\n}\r\n\r\n// const rows = [\r\n//     createData('Cupcake', 305, 3.7),\r\n//     createData('Donut', 452, 25.0),\r\n//     createData('Eclair', 262, 16.0),\r\n//     createData('Frozen yoghurt', 159, 6.0),\r\n//     createData('Gingerbread', 356, 16.0),\r\n//     createData('Honeycomb', 408, 3.2),\r\n//     createData('Ice cream sandwich', 237, 9.0),\r\n//     createData('Jelly Bean', 375, 0.0),\r\n//     createData('KitKat', 518, 26.0),\r\n//     createData('Lollipop', 392, 0.2),\r\n//     createData('Marshmallow', 318, 0),\r\n//     createData('Nougat', 360, 19.0),\r\n//     createData('Oreo', 437, 18.0),\r\n// ].sort((a, b) => (a.assetId < b.assetId ? -1 : 1));\r\n\r\n\r\nexport default function index() {\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n    const [rows, setRows] = React.useState([]);\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n    const [data, setData] = useState(null)\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await getAssets()\r\n            if (result.data.data === undefined) {\r\n                fetchData()\r\n                return\r\n            }\r\n            setRows(result.data.data)\r\n            console.log(result.data.data)\r\n        };\r\n        fetchData();\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <div className='home-contiar'>\r\n                <Nav></Nav>\r\n                <div className='assets'>\r\n                    <header>\r\n                        <h2>Assets</h2>\r\n                    </header>\r\n                    <TableContainer component={Paper} className='assets-table'>\r\n                        <Table aria-label=\"custom pagination table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    {columns.map((column) => (\r\n                                        <TableCell\r\n                                            key={column.id}\r\n                                            align=\"center\"\r\n                                            style={{ minWidth: column.minWidth }}\r\n                                        >\r\n                                            {column.label}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {rows\r\n                                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                    .map((row, index) => {\r\n\r\n                                        return (\r\n                                            <TableRow\r\n                                                hover\r\n                                                role=\"checkbox\"\r\n                                                tabIndex={-1}\r\n                                                key={index}\r\n                                            >\r\n                                                {columns.map((column) => {\r\n                                                    let value;\r\n                                                    value = row[column.id];\r\n                                                    return (\r\n                                                        <TableCell\r\n                                                            key={column.id}\r\n                                                            align=\"center\"\r\n                                                            style={{ color: column.color }}\r\n                                                        >\r\n                                                            {column.id == \"quantity\"\r\n                                                                ? `${row[column.id] + row.symbol}  `\r\n                                                                : value}\r\n                                                        </TableCell>\r\n                                                    );\r\n                                                })}\r\n                                            </TableRow>\r\n                                        );\r\n                                    })}\r\n                            </TableBody>\r\n                            <TableFooter>\r\n                                <TableRow>\r\n                                    <TablePagination\r\n                                        rowsPerPageOptions={[5, 10, 25, 50, 100]}\r\n                                        colSpan={3}\r\n                                        count={rows.length}\r\n                                        rowsPerPage={rowsPerPage}\r\n                                        page={page}\r\n                                        SelectProps={{\r\n                                            inputProps: { 'aria-label': 'rows per page' },\r\n                                            native: true,\r\n                                        }}\r\n                                        onChangePage={handleChangePage}\r\n                                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                        ActionsComponent={TablePaginationActions}\r\n                                    />\r\n                                </TableRow>\r\n                            </TableFooter>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}